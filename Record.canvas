{
	"nodes":[
		{"id":"59012c190d17c972","type":"file","file":"Trail.md","x":57,"y":184,"width":400,"height":400},
		{"id":"7d11ceaec00bbfe9","type":"text","text":"literate | BrE ˈlɪt(ə)rət, AmE ˈlɪdərət | adjective ① (able to read and write) 有读写能力的 yǒu dúxiě nénglì de▸ he is barely literate他几乎不识字② (cultured) 有文化修养的 yǒu wénhuà xiūyǎng de ‹person›; 显示出文化修养的 xiǎnshì chū wénhuà xiūyǎng de ‹style, prose, vocabulary›③ (knowledgeable) 精通的 jīngtōng de▸ to be literate in sth; 精通某事▸ an emotionally literate person 通达人情世故的人","x":57,"y":620,"width":325,"height":406},
		{"id":"41a57fe28742e0ab","type":"text","text":"# iterate 迭代/recursion 递归\n\n-\n递归中一定有迭代，但迭代中不一定有递归，大部分可以相互转换\n- 递归时不断调用自身，假设递归自己是一个函数的话，那递归的返回值会当作参数再次传入自身。迭代是将某一个初值设定，不断放入某一个循环体，得到的值成为一个新值再次放入循环体中，通过循环体中的操作，逐步得到我们想要的结果，总结就是：**程序调用自身成为递归，利用变量的原址推出新值称为迭代。**\n- **递归是自己调用自己，迭代是自己调用别人。**\n\n","x":-1360,"y":846,"width":630,"height":360},
		{"id":"7e76e78455dfee69","type":"text","text":"计算机相关","x":-420,"y":996,"width":250,"height":60},
		{"id":"c4701c0be58a4740","type":"text","text":"not do.... rather ....\nyou shouldn't do if (x == 2048),but rather if(x == MAX_PIECE). ","x":-1049,"y":1346,"width":247,"height":124},
		{"id":"b4481588cbaee2e5","type":"text","text":"## 短语\n**Nested**(嵌套) Helper Methods and **Refactoring**(重构) for Debugging\n用于调试的嵌套帮助程序方法和重构\n>e.g. firstDigitEqualsLastDigit(max(p)) 可以通过 refactor重构成 \n```\nint currentMax = max(p);\nboolean firstEqualsLast = firstDigitEqualsLastDigit(currentMax);\n```\n**limiting beliefs** 限制性信念\n\nMutiplicative Resizing Strategy 乘法扩容策略","x":-1520,"y":1625,"width":678,"height":775},
		{"id":"9033c29a759c54d6","type":"text","text":"# Sentence\n**With** AritmeticTast.java **open**,click the Run.. option/选项 under the Run menu at the top of IntelliJ **as shown** in the following screeenshot.\n打开 `ArithmeticTest.java` 后，单击 `Run` 下的 `Run...` 选项 菜单，如以下屏幕截图所示\n>with sth. do ,do ... /  **as** shown\n\nAs an **analogy**, you do not have direct control over your heartbeat. While this restricts your ability to optimize for certain situations, it also avoids the possibility of making stupid errors like accidentally turning it off.\n打个比方，你不能直接控制你的心跳。虽然这限制了您针对某些情况进行优化的能力，但它也避免了犯愚蠢错误的可能性，例如不小心将其关闭。\n>**Premature** optimization is the root of all evil\n\nThese methods don’t add any real functionality to the `IntList` class per-se, but they do provide convenient ways of creating and displaying `IntList`s, respectively.\n这些方法本身并没有向`IntList` 类添加任何实际功能，但它们确实提供了分别创建和显示 `IntList`的便捷方法。\n>副词后置\n\nSpecifically, it **replaces** the value at a node in an IntList **with** 0 if (and only if) the max of the IntList _starting at that node_ has the same first and last digit.\n具体来说，当（且仅当）从该节点开始的 IntList 的最大值具有相同的第一位和最后一位数字时，它会将 IntList 中节点的值替换为 0\n>replace ... with ...\n\nOne tactic I use in **circumstances** like this is to refactor my code to make it more debugging friendly.\n在这种情况下，我使用的一种策略是重构我的代码，使其对调试更友好。\n>in circumstances like this 在这种情况下\n\nresize the **underlying** array to the target capacity\n将基础阵列的大小调整为目标容量\n>underlying 基础的  resize sth. to .. 调整大小\n\na modificatIon **of**  any single element **of** a system does  not require a change **in** other logically unrelated element.\n对系统中任何单个元素的修改都不需要改变其他逻辑上不相关的元素\n>of in\n\nthey’ll become **unwieldy – amassing** complex logic but being very expensive to unit test because of all the dependencies and **overlapping** concerns.\n它们将变得笨拙——积累复杂的逻辑，但由于所有的依赖关系和重叠的关注点，单元测试的成本非常高。\n> -  表示解释 \n\nTo avoid this, you can **factor out** independent ~~**bits of**~~ application logic into service classes and business logic into domain model classes.\n为了避免这种情况，您可以将独立的应用程序逻辑分解到服务类中，将业务逻辑分解到域模型类中。\n> factor out 分离出 \n","x":-522,"y":1320,"width":619,"height":2182},
		{"id":"1f3e39942c0393a5","type":"text","text":"conceptual  misunderstanding 概念上的误解\nmanually  /ˈmæn.ju.ə.li/手动的\n**manual**  ˈmanjʊəl,使用手册；体力的；体力劳动者\ncumbersome  /_ˈkʌm.bɚ.səm_/_笨重的\ntibit 趣闻，美味小吃\ndepicted /_dɪˈpɪkt_/ 描绘；描述；描写\nHint 提示；暗示；迹象；窍门\nbold 块\n**formulate** 制定;规划；构想\n**hypothesis**/_haɪˈpɑː.θə.sɪs_/假设 复数 **hypotheses**\n**stumble** 陷入\n**right into** 转进\n>with each new piece of evindence,you will **refine**(完善) your hypotheses , until finally, you cannot help but stumble right into the bug.\n\nvaguely resemble _/ˈveɪɡ.li_/ 略微类似‘\nproceed 前进\nwhereas _/werˈæz/_ 尽管；但是；却\nliteral 字面的，根本的\ninstance 例子\n**instantiate** v.举例说明\n**particular** 特定的\n**obtuse**愚钝的；迟钝的\n**recap** 概要；概述；总结\n**rigorously** | BrE ˈrɪɡ(ə)rəsli, AmE ˈrɪɡ(ə)rəsli | adverb严格地\n**revert** 复习\n**functionality** 实用性；设计功能；功能\n**ArithmeticTest** 算术测试\n**arbitrary** 武断的\n>our choice was purely arbitrary \n>我们的选择完全是随意的\n\n**short circuit** | BrE ˌʃɔːt ˈsəːkɪt, AmE ˌʃɔrt ˈsərkət | 短路；发生短路\n**respectively** 分别地\n**premature**  ˈprɛmətʃə 过早的； 仓促的\n**mutatively** 变化的；可变的\n**isolate** 隔离;使...孤立\n**tactic** 策略\n**yield** 产生\n**ideally** 理想情况下\n**scope** 范围领域；机会\n**typically** 典型的\n**competitiveness** 竞争意识；竞争力\n**inaction** 无行动\n**distractions** 分心\n**somehow** 以某种方式；出于某种原因\n**omitted** (omit) 删除；疏忽\n**tradeoff** 权衡；交易\n**analogy** 类似；类推\nannoy 惹恼；打搅 \n","x":480,"y":1020,"width":880,"height":1540}
	],
	"edges":[
		{"id":"f0f06c68e1b8f86f","fromNode":"7e76e78455dfee69","fromSide":"bottom","toNode":"41a57fe28742e0ab","toSide":"right"},
		{"id":"939490c1e2852301","fromNode":"7e76e78455dfee69","fromSide":"bottom","toNode":"c4701c0be58a4740","toSide":"right"},
		{"id":"aaeae041460542a5","fromNode":"7e76e78455dfee69","fromSide":"bottom","toNode":"b4481588cbaee2e5","toSide":"right"},
		{"id":"c10d8b598a6e525e","fromNode":"7e76e78455dfee69","fromSide":"bottom","toNode":"9033c29a759c54d6","toSide":"top"}
	]
}