{
	"nodes":[
		{"id":"d43e00b09c0c00b7","type":"text","text":"在编程中，**数组**和**列表**的表示方式取决于所用的编程语言及其特点。以下是常见的数组和列表的表示方法和示例：\n\n  \n\n**1. 数组 (Array)**\n\n  \n\n**特点**\n\n  \n\n• 大小固定（在某些语言中不可动态扩展）。\n\n• 元素类型一致。\n\n• 通过索引访问元素，索引从 0 开始。\n\n  \n\n**常见表示方式**\n\n  \n\n• **C/C++**:\n\n  \n\nint arr[] = {1, 2, 3, 4, 5};  // 定义一个包含5个整数的数组\n\nint arr2[10];                 // 声明大小为10的整数数组，未初始化\n\narr[0] = 42;                  // 修改数组第一个元素\n\n  \n\n  \n\n• **Java**:\n\n  \n\nint[] arr = {1, 2, 3, 4, 5};  // 创建并初始化数组\n\nint[] arr2 = new int[10];     // 创建一个大小为10的数组\n\narr[0] = 42;                  // 修改第一个元素\n\n  \n\n  \n\n• **Python**:\n\nPython 没有严格意义上的数组，通常使用 list 或 numpy.array 模拟：\n\n  \n\nimport numpy as np\n\narr = np.array([1, 2, 3, 4, 5])  # 使用 numpy 创建数组\n\narr[0] = 42                      # 修改第一个元素\n\n  \n\n  \n\n  \n\n**表示样例**\n\n  \n\n• 表示一个数组 [1, 2, 3, 4, 5]：\n\n  \n\nIndex:   0   1   2   3   4\n\nValue:   1   2   3   4   5\n\n  \n\n**2. 列表 (List)**\n\n  \n\n**特点**\n\n  \n\n• 大小动态，可随时扩展或缩减。\n\n• 可以存储不同类型的元素（某些语言允许）。\n\n• 通常提供丰富的操作方法（如添加、删除、排序等）。\n\n  \n\n**常见表示方式**\n\n  \n\n• **C++ (std::vector)**:\n\n  \n\n#include <vector>\n\nstd::vector<int> lst = {1, 2, 3, 4, 5};  // 定义并初始化列表\n\nlst.push_back(6);                        // 添加一个元素\n\nlst[0] = 42;                             // 修改第一个元素\n\n  \n\n  \n\n• **Java (ArrayList)**:\n\n  \n\nimport java.util.ArrayList;\n\nArrayList<Integer> list = new ArrayList<>();\n\nlist.add(1);\n\nlist.add(2);\n\nlist.add(3);\n\nlist.set(0, 42);  // 修改第一个元素\n\n  \n\n  \n\n• **Python (list)**:\n\n  \n\nlst = [1, 2, 3, 4, 5]  # 定义一个列表\n\nlst.append(6)          # 添加一个元素\n\nlst[0] = 42            # 修改第一个元素\n\n  \n\n  \n\n  \n\n**表示样例**\n\n  \n\n• 表示一个列表 [1, 2, 3, 4, 5]：\n\n  \n\nIndex:   0   1   2   3   4\n\nValue:   1   2   3   4   5\n\nMethods: .append(), .remove(), .sort(), etc.\n\n  \n\n**3. 区别与联系**\n\n  \n\n**特性** **数组 (Array)** **列表 (List)**\n\n**大小** 固定（部分语言可动态调整） 动态调整\n\n**类型** 元素类型一致 部分语言允许不同类型元素\n\n**操作复杂度** 通常较低 操作方法更多，灵活性高\n\n**内存布局** 连续存储 不一定连续（视实现而定）\n\n  \n\n**4. 使用场景**\n\n  \n\n• **数组**：更高效的内存利用，适合需要快速索引访问的场景。\n\n• **列表**：灵活、易用，适合动态调整数据结构的场景。\n\n  \n\n**总结**\n\n  \n\n数组与列表的使用和表示方式各有优劣，选择哪种取决于具体需求和编程语言支持的特性。","x":-294,"y":-467,"width":854,"height":4387}
	],
	"edges":[]
}